// Generated bindings for numpy v3.13.2
#![allow(dead_code)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(clippy::useless_transmute)]
#![allow(clippy::default_trait_access)]
#![allow(clippy::cast_lossless)]
#![allow(clippy::trivially_copy_pass_by_ref)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::too_many_arguments)]
/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
pub type Py_ssize_t = isize;
pub type Py_hash_t = Py_ssize_t;
pub type PyObject = _object;
pub type PyTypeObject = _typeobject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Py_buffer {
    pub buf: *mut ::std::os::raw::c_void,
    pub obj: *mut PyObject,
    pub len: Py_ssize_t,
    pub itemsize: Py_ssize_t,
    pub readonly: ::std::os::raw::c_int,
    pub ndim: ::std::os::raw::c_int,
    pub format: *mut ::std::os::raw::c_char,
    pub shape: *mut Py_ssize_t,
    pub strides: *mut Py_ssize_t,
    pub suboffsets: *mut Py_ssize_t,
    pub internal: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Py_buffer"][::std::mem::size_of::<Py_buffer>() - 80usize];
    ["Alignment of Py_buffer"][::std::mem::align_of::<Py_buffer>() - 8usize];
    ["Offset of field: Py_buffer::buf"][::std::mem::offset_of!(Py_buffer, buf) - 0usize];
    ["Offset of field: Py_buffer::obj"][::std::mem::offset_of!(Py_buffer, obj) - 8usize];
    ["Offset of field: Py_buffer::len"][::std::mem::offset_of!(Py_buffer, len) - 16usize];
    ["Offset of field: Py_buffer::itemsize"][::std::mem::offset_of!(Py_buffer, itemsize) - 24usize];
    ["Offset of field: Py_buffer::readonly"][::std::mem::offset_of!(Py_buffer, readonly) - 32usize];
    ["Offset of field: Py_buffer::ndim"][::std::mem::offset_of!(Py_buffer, ndim) - 36usize];
    ["Offset of field: Py_buffer::format"][::std::mem::offset_of!(Py_buffer, format) - 40usize];
    ["Offset of field: Py_buffer::shape"][::std::mem::offset_of!(Py_buffer, shape) - 48usize];
    ["Offset of field: Py_buffer::strides"][::std::mem::offset_of!(Py_buffer, strides) - 56usize];
    ["Offset of field: Py_buffer::suboffsets"]
        [::std::mem::offset_of!(Py_buffer, suboffsets) - 64usize];
    ["Offset of field: Py_buffer::internal"][::std::mem::offset_of!(Py_buffer, internal) - 72usize];
};
pub type getbufferproc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut Py_buffer,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type releasebufferproc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut Py_buffer)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _object {
    pub __bindgen_anon_1: _object__bindgen_ty_1,
    pub ob_type: *mut PyTypeObject,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _object__bindgen_ty_1 {
    pub ob_refcnt: Py_ssize_t,
    pub ob_refcnt_split: [u32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _object__bindgen_ty_1"][::std::mem::size_of::<_object__bindgen_ty_1>() - 8usize];
    ["Alignment of _object__bindgen_ty_1"]
        [::std::mem::align_of::<_object__bindgen_ty_1>() - 8usize];
    ["Offset of field: _object__bindgen_ty_1::ob_refcnt"]
        [::std::mem::offset_of!(_object__bindgen_ty_1, ob_refcnt) - 0usize];
    ["Offset of field: _object__bindgen_ty_1::ob_refcnt_split"]
        [::std::mem::offset_of!(_object__bindgen_ty_1, ob_refcnt_split) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _object"][::std::mem::size_of::<_object>() - 16usize];
    ["Alignment of _object"][::std::mem::align_of::<_object>() - 8usize];
    ["Offset of field: _object::ob_type"][::std::mem::offset_of!(_object, ob_type) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyVarObject {
    pub ob_base: PyObject,
    pub ob_size: Py_ssize_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyVarObject"][::std::mem::size_of::<PyVarObject>() - 24usize];
    ["Alignment of PyVarObject"][::std::mem::align_of::<PyVarObject>() - 8usize];
    ["Offset of field: PyVarObject::ob_base"]
        [::std::mem::offset_of!(PyVarObject, ob_base) - 0usize];
    ["Offset of field: PyVarObject::ob_size"]
        [::std::mem::offset_of!(PyVarObject, ob_size) - 16usize];
};
pub type unaryfunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject>;
pub type binaryfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
>;
pub type ternaryfunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject,
>;
pub type inquiry =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int>;
pub type lenfunc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> Py_ssize_t>;
pub type ssizeargfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t) -> *mut PyObject,
>;
pub type ssizeobjargproc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
pub type objobjargproc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
pub type objobjproc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
>;
pub type visitproc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type traverseproc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: visitproc,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type freefunc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type destructor = ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject)>;
pub type getattrfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut ::std::os::raw::c_char) -> *mut PyObject,
>;
pub type getattrofunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
>;
pub type setattrfunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
pub type setattrofunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
pub type reprfunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject>;
pub type hashfunc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> Py_hash_t>;
pub type richcmpfunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: ::std::os::raw::c_int,
    ) -> *mut PyObject,
>;
pub type getiterfunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject>;
pub type iternextfunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject>;
pub type descrgetfunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject,
>;
pub type descrsetfunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
pub type initproc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
pub type newfunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyTypeObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject,
>;
pub type allocfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyTypeObject, arg2: Py_ssize_t) -> *mut PyObject,
>;
pub type vectorcallfunc = ::std::option::Option<
    unsafe extern "C" fn(
        callable: *mut PyObject,
        args: *const *mut PyObject,
        nargsf: usize,
        kwnames: *mut PyObject,
    ) -> *mut PyObject,
>;
pub const PySendResult_PYGEN_RETURN: PySendResult = 0;
pub const PySendResult_PYGEN_ERROR: PySendResult = -1;
pub const PySendResult_PYGEN_NEXT: PySendResult = 1;
pub type PySendResult = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyNumberMethods {
    pub nb_add: binaryfunc,
    pub nb_subtract: binaryfunc,
    pub nb_multiply: binaryfunc,
    pub nb_remainder: binaryfunc,
    pub nb_divmod: binaryfunc,
    pub nb_power: ternaryfunc,
    pub nb_negative: unaryfunc,
    pub nb_positive: unaryfunc,
    pub nb_absolute: unaryfunc,
    pub nb_bool: inquiry,
    pub nb_invert: unaryfunc,
    pub nb_lshift: binaryfunc,
    pub nb_rshift: binaryfunc,
    pub nb_and: binaryfunc,
    pub nb_xor: binaryfunc,
    pub nb_or: binaryfunc,
    pub nb_int: unaryfunc,
    pub nb_reserved: *mut ::std::os::raw::c_void,
    pub nb_float: unaryfunc,
    pub nb_inplace_add: binaryfunc,
    pub nb_inplace_subtract: binaryfunc,
    pub nb_inplace_multiply: binaryfunc,
    pub nb_inplace_remainder: binaryfunc,
    pub nb_inplace_power: ternaryfunc,
    pub nb_inplace_lshift: binaryfunc,
    pub nb_inplace_rshift: binaryfunc,
    pub nb_inplace_and: binaryfunc,
    pub nb_inplace_xor: binaryfunc,
    pub nb_inplace_or: binaryfunc,
    pub nb_floor_divide: binaryfunc,
    pub nb_true_divide: binaryfunc,
    pub nb_inplace_floor_divide: binaryfunc,
    pub nb_inplace_true_divide: binaryfunc,
    pub nb_index: unaryfunc,
    pub nb_matrix_multiply: binaryfunc,
    pub nb_inplace_matrix_multiply: binaryfunc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyNumberMethods"][::std::mem::size_of::<PyNumberMethods>() - 288usize];
    ["Alignment of PyNumberMethods"][::std::mem::align_of::<PyNumberMethods>() - 8usize];
    ["Offset of field: PyNumberMethods::nb_add"]
        [::std::mem::offset_of!(PyNumberMethods, nb_add) - 0usize];
    ["Offset of field: PyNumberMethods::nb_subtract"]
        [::std::mem::offset_of!(PyNumberMethods, nb_subtract) - 8usize];
    ["Offset of field: PyNumberMethods::nb_multiply"]
        [::std::mem::offset_of!(PyNumberMethods, nb_multiply) - 16usize];
    ["Offset of field: PyNumberMethods::nb_remainder"]
        [::std::mem::offset_of!(PyNumberMethods, nb_remainder) - 24usize];
    ["Offset of field: PyNumberMethods::nb_divmod"]
        [::std::mem::offset_of!(PyNumberMethods, nb_divmod) - 32usize];
    ["Offset of field: PyNumberMethods::nb_power"]
        [::std::mem::offset_of!(PyNumberMethods, nb_power) - 40usize];
    ["Offset of field: PyNumberMethods::nb_negative"]
        [::std::mem::offset_of!(PyNumberMethods, nb_negative) - 48usize];
    ["Offset of field: PyNumberMethods::nb_positive"]
        [::std::mem::offset_of!(PyNumberMethods, nb_positive) - 56usize];
    ["Offset of field: PyNumberMethods::nb_absolute"]
        [::std::mem::offset_of!(PyNumberMethods, nb_absolute) - 64usize];
    ["Offset of field: PyNumberMethods::nb_bool"]
        [::std::mem::offset_of!(PyNumberMethods, nb_bool) - 72usize];
    ["Offset of field: PyNumberMethods::nb_invert"]
        [::std::mem::offset_of!(PyNumberMethods, nb_invert) - 80usize];
    ["Offset of field: PyNumberMethods::nb_lshift"]
        [::std::mem::offset_of!(PyNumberMethods, nb_lshift) - 88usize];
    ["Offset of field: PyNumberMethods::nb_rshift"]
        [::std::mem::offset_of!(PyNumberMethods, nb_rshift) - 96usize];
    ["Offset of field: PyNumberMethods::nb_and"]
        [::std::mem::offset_of!(PyNumberMethods, nb_and) - 104usize];
    ["Offset of field: PyNumberMethods::nb_xor"]
        [::std::mem::offset_of!(PyNumberMethods, nb_xor) - 112usize];
    ["Offset of field: PyNumberMethods::nb_or"]
        [::std::mem::offset_of!(PyNumberMethods, nb_or) - 120usize];
    ["Offset of field: PyNumberMethods::nb_int"]
        [::std::mem::offset_of!(PyNumberMethods, nb_int) - 128usize];
    ["Offset of field: PyNumberMethods::nb_reserved"]
        [::std::mem::offset_of!(PyNumberMethods, nb_reserved) - 136usize];
    ["Offset of field: PyNumberMethods::nb_float"]
        [::std::mem::offset_of!(PyNumberMethods, nb_float) - 144usize];
    ["Offset of field: PyNumberMethods::nb_inplace_add"]
        [::std::mem::offset_of!(PyNumberMethods, nb_inplace_add) - 152usize];
    ["Offset of field: PyNumberMethods::nb_inplace_subtract"]
        [::std::mem::offset_of!(PyNumberMethods, nb_inplace_subtract) - 160usize];
    ["Offset of field: PyNumberMethods::nb_inplace_multiply"]
        [::std::mem::offset_of!(PyNumberMethods, nb_inplace_multiply) - 168usize];
    ["Offset of field: PyNumberMethods::nb_inplace_remainder"]
        [::std::mem::offset_of!(PyNumberMethods, nb_inplace_remainder) - 176usize];
    ["Offset of field: PyNumberMethods::nb_inplace_power"]
        [::std::mem::offset_of!(PyNumberMethods, nb_inplace_power) - 184usize];
    ["Offset of field: PyNumberMethods::nb_inplace_lshift"]
        [::std::mem::offset_of!(PyNumberMethods, nb_inplace_lshift) - 192usize];
    ["Offset of field: PyNumberMethods::nb_inplace_rshift"]
        [::std::mem::offset_of!(PyNumberMethods, nb_inplace_rshift) - 200usize];
    ["Offset of field: PyNumberMethods::nb_inplace_and"]
        [::std::mem::offset_of!(PyNumberMethods, nb_inplace_and) - 208usize];
    ["Offset of field: PyNumberMethods::nb_inplace_xor"]
        [::std::mem::offset_of!(PyNumberMethods, nb_inplace_xor) - 216usize];
    ["Offset of field: PyNumberMethods::nb_inplace_or"]
        [::std::mem::offset_of!(PyNumberMethods, nb_inplace_or) - 224usize];
    ["Offset of field: PyNumberMethods::nb_floor_divide"]
        [::std::mem::offset_of!(PyNumberMethods, nb_floor_divide) - 232usize];
    ["Offset of field: PyNumberMethods::nb_true_divide"]
        [::std::mem::offset_of!(PyNumberMethods, nb_true_divide) - 240usize];
    ["Offset of field: PyNumberMethods::nb_inplace_floor_divide"]
        [::std::mem::offset_of!(PyNumberMethods, nb_inplace_floor_divide) - 248usize];
    ["Offset of field: PyNumberMethods::nb_inplace_true_divide"]
        [::std::mem::offset_of!(PyNumberMethods, nb_inplace_true_divide) - 256usize];
    ["Offset of field: PyNumberMethods::nb_index"]
        [::std::mem::offset_of!(PyNumberMethods, nb_index) - 264usize];
    ["Offset of field: PyNumberMethods::nb_matrix_multiply"]
        [::std::mem::offset_of!(PyNumberMethods, nb_matrix_multiply) - 272usize];
    ["Offset of field: PyNumberMethods::nb_inplace_matrix_multiply"]
        [::std::mem::offset_of!(PyNumberMethods, nb_inplace_matrix_multiply) - 280usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PySequenceMethods {
    pub sq_length: lenfunc,
    pub sq_concat: binaryfunc,
    pub sq_repeat: ssizeargfunc,
    pub sq_item: ssizeargfunc,
    pub was_sq_slice: *mut ::std::os::raw::c_void,
    pub sq_ass_item: ssizeobjargproc,
    pub was_sq_ass_slice: *mut ::std::os::raw::c_void,
    pub sq_contains: objobjproc,
    pub sq_inplace_concat: binaryfunc,
    pub sq_inplace_repeat: ssizeargfunc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PySequenceMethods"][::std::mem::size_of::<PySequenceMethods>() - 80usize];
    ["Alignment of PySequenceMethods"][::std::mem::align_of::<PySequenceMethods>() - 8usize];
    ["Offset of field: PySequenceMethods::sq_length"]
        [::std::mem::offset_of!(PySequenceMethods, sq_length) - 0usize];
    ["Offset of field: PySequenceMethods::sq_concat"]
        [::std::mem::offset_of!(PySequenceMethods, sq_concat) - 8usize];
    ["Offset of field: PySequenceMethods::sq_repeat"]
        [::std::mem::offset_of!(PySequenceMethods, sq_repeat) - 16usize];
    ["Offset of field: PySequenceMethods::sq_item"]
        [::std::mem::offset_of!(PySequenceMethods, sq_item) - 24usize];
    ["Offset of field: PySequenceMethods::was_sq_slice"]
        [::std::mem::offset_of!(PySequenceMethods, was_sq_slice) - 32usize];
    ["Offset of field: PySequenceMethods::sq_ass_item"]
        [::std::mem::offset_of!(PySequenceMethods, sq_ass_item) - 40usize];
    ["Offset of field: PySequenceMethods::was_sq_ass_slice"]
        [::std::mem::offset_of!(PySequenceMethods, was_sq_ass_slice) - 48usize];
    ["Offset of field: PySequenceMethods::sq_contains"]
        [::std::mem::offset_of!(PySequenceMethods, sq_contains) - 56usize];
    ["Offset of field: PySequenceMethods::sq_inplace_concat"]
        [::std::mem::offset_of!(PySequenceMethods, sq_inplace_concat) - 64usize];
    ["Offset of field: PySequenceMethods::sq_inplace_repeat"]
        [::std::mem::offset_of!(PySequenceMethods, sq_inplace_repeat) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMappingMethods {
    pub mp_length: lenfunc,
    pub mp_subscript: binaryfunc,
    pub mp_ass_subscript: objobjargproc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyMappingMethods"][::std::mem::size_of::<PyMappingMethods>() - 24usize];
    ["Alignment of PyMappingMethods"][::std::mem::align_of::<PyMappingMethods>() - 8usize];
    ["Offset of field: PyMappingMethods::mp_length"]
        [::std::mem::offset_of!(PyMappingMethods, mp_length) - 0usize];
    ["Offset of field: PyMappingMethods::mp_subscript"]
        [::std::mem::offset_of!(PyMappingMethods, mp_subscript) - 8usize];
    ["Offset of field: PyMappingMethods::mp_ass_subscript"]
        [::std::mem::offset_of!(PyMappingMethods, mp_ass_subscript) - 16usize];
};
pub type sendfunc = ::std::option::Option<
    unsafe extern "C" fn(
        iter: *mut PyObject,
        value: *mut PyObject,
        result: *mut *mut PyObject,
    ) -> PySendResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyAsyncMethods {
    pub am_await: unaryfunc,
    pub am_aiter: unaryfunc,
    pub am_anext: unaryfunc,
    pub am_send: sendfunc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyAsyncMethods"][::std::mem::size_of::<PyAsyncMethods>() - 32usize];
    ["Alignment of PyAsyncMethods"][::std::mem::align_of::<PyAsyncMethods>() - 8usize];
    ["Offset of field: PyAsyncMethods::am_await"]
        [::std::mem::offset_of!(PyAsyncMethods, am_await) - 0usize];
    ["Offset of field: PyAsyncMethods::am_aiter"]
        [::std::mem::offset_of!(PyAsyncMethods, am_aiter) - 8usize];
    ["Offset of field: PyAsyncMethods::am_anext"]
        [::std::mem::offset_of!(PyAsyncMethods, am_anext) - 16usize];
    ["Offset of field: PyAsyncMethods::am_send"]
        [::std::mem::offset_of!(PyAsyncMethods, am_send) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyBufferProcs {
    pub bf_getbuffer: getbufferproc,
    pub bf_releasebuffer: releasebufferproc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyBufferProcs"][::std::mem::size_of::<PyBufferProcs>() - 16usize];
    ["Alignment of PyBufferProcs"][::std::mem::align_of::<PyBufferProcs>() - 8usize];
    ["Offset of field: PyBufferProcs::bf_getbuffer"]
        [::std::mem::offset_of!(PyBufferProcs, bf_getbuffer) - 0usize];
    ["Offset of field: PyBufferProcs::bf_releasebuffer"]
        [::std::mem::offset_of!(PyBufferProcs, bf_releasebuffer) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _typeobject {
    pub ob_base: PyVarObject,
    pub tp_name: *const ::std::os::raw::c_char,
    pub tp_basicsize: Py_ssize_t,
    pub tp_itemsize: Py_ssize_t,
    pub tp_dealloc: destructor,
    pub tp_vectorcall_offset: Py_ssize_t,
    pub tp_getattr: getattrfunc,
    pub tp_setattr: setattrfunc,
    pub tp_as_async: *mut PyAsyncMethods,
    pub tp_repr: reprfunc,
    pub tp_as_number: *mut PyNumberMethods,
    pub tp_as_sequence: *mut PySequenceMethods,
    pub tp_as_mapping: *mut PyMappingMethods,
    pub tp_hash: hashfunc,
    pub tp_call: ternaryfunc,
    pub tp_str: reprfunc,
    pub tp_getattro: getattrofunc,
    pub tp_setattro: setattrofunc,
    pub tp_as_buffer: *mut PyBufferProcs,
    pub tp_flags: ::std::os::raw::c_ulong,
    pub tp_doc: *const ::std::os::raw::c_char,
    pub tp_traverse: traverseproc,
    pub tp_clear: inquiry,
    pub tp_richcompare: richcmpfunc,
    pub tp_weaklistoffset: Py_ssize_t,
    pub tp_iter: getiterfunc,
    pub tp_iternext: iternextfunc,
    pub tp_methods: *mut PyMethodDef,
    pub tp_members: *mut PyMemberDef,
    pub tp_getset: *mut PyGetSetDef,
    pub tp_base: *mut PyTypeObject,
    pub tp_dict: *mut PyObject,
    pub tp_descr_get: descrgetfunc,
    pub tp_descr_set: descrsetfunc,
    pub tp_dictoffset: Py_ssize_t,
    pub tp_init: initproc,
    pub tp_alloc: allocfunc,
    pub tp_new: newfunc,
    pub tp_free: freefunc,
    pub tp_is_gc: inquiry,
    pub tp_bases: *mut PyObject,
    pub tp_mro: *mut PyObject,
    pub tp_cache: *mut PyObject,
    pub tp_subclasses: *mut ::std::os::raw::c_void,
    pub tp_weaklist: *mut PyObject,
    pub tp_del: destructor,
    pub tp_version_tag: ::std::os::raw::c_uint,
    pub tp_finalize: destructor,
    pub tp_vectorcall: vectorcallfunc,
    pub tp_watched: ::std::os::raw::c_uchar,
    pub tp_versions_used: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _typeobject"][::std::mem::size_of::<_typeobject>() - 416usize];
    ["Alignment of _typeobject"][::std::mem::align_of::<_typeobject>() - 8usize];
    ["Offset of field: _typeobject::ob_base"]
        [::std::mem::offset_of!(_typeobject, ob_base) - 0usize];
    ["Offset of field: _typeobject::tp_name"]
        [::std::mem::offset_of!(_typeobject, tp_name) - 24usize];
    ["Offset of field: _typeobject::tp_basicsize"]
        [::std::mem::offset_of!(_typeobject, tp_basicsize) - 32usize];
    ["Offset of field: _typeobject::tp_itemsize"]
        [::std::mem::offset_of!(_typeobject, tp_itemsize) - 40usize];
    ["Offset of field: _typeobject::tp_dealloc"]
        [::std::mem::offset_of!(_typeobject, tp_dealloc) - 48usize];
    ["Offset of field: _typeobject::tp_vectorcall_offset"]
        [::std::mem::offset_of!(_typeobject, tp_vectorcall_offset) - 56usize];
    ["Offset of field: _typeobject::tp_getattr"]
        [::std::mem::offset_of!(_typeobject, tp_getattr) - 64usize];
    ["Offset of field: _typeobject::tp_setattr"]
        [::std::mem::offset_of!(_typeobject, tp_setattr) - 72usize];
    ["Offset of field: _typeobject::tp_as_async"]
        [::std::mem::offset_of!(_typeobject, tp_as_async) - 80usize];
    ["Offset of field: _typeobject::tp_repr"]
        [::std::mem::offset_of!(_typeobject, tp_repr) - 88usize];
    ["Offset of field: _typeobject::tp_as_number"]
        [::std::mem::offset_of!(_typeobject, tp_as_number) - 96usize];
    ["Offset of field: _typeobject::tp_as_sequence"]
        [::std::mem::offset_of!(_typeobject, tp_as_sequence) - 104usize];
    ["Offset of field: _typeobject::tp_as_mapping"]
        [::std::mem::offset_of!(_typeobject, tp_as_mapping) - 112usize];
    ["Offset of field: _typeobject::tp_hash"]
        [::std::mem::offset_of!(_typeobject, tp_hash) - 120usize];
    ["Offset of field: _typeobject::tp_call"]
        [::std::mem::offset_of!(_typeobject, tp_call) - 128usize];
    ["Offset of field: _typeobject::tp_str"]
        [::std::mem::offset_of!(_typeobject, tp_str) - 136usize];
    ["Offset of field: _typeobject::tp_getattro"]
        [::std::mem::offset_of!(_typeobject, tp_getattro) - 144usize];
    ["Offset of field: _typeobject::tp_setattro"]
        [::std::mem::offset_of!(_typeobject, tp_setattro) - 152usize];
    ["Offset of field: _typeobject::tp_as_buffer"]
        [::std::mem::offset_of!(_typeobject, tp_as_buffer) - 160usize];
    ["Offset of field: _typeobject::tp_flags"]
        [::std::mem::offset_of!(_typeobject, tp_flags) - 168usize];
    ["Offset of field: _typeobject::tp_doc"]
        [::std::mem::offset_of!(_typeobject, tp_doc) - 176usize];
    ["Offset of field: _typeobject::tp_traverse"]
        [::std::mem::offset_of!(_typeobject, tp_traverse) - 184usize];
    ["Offset of field: _typeobject::tp_clear"]
        [::std::mem::offset_of!(_typeobject, tp_clear) - 192usize];
    ["Offset of field: _typeobject::tp_richcompare"]
        [::std::mem::offset_of!(_typeobject, tp_richcompare) - 200usize];
    ["Offset of field: _typeobject::tp_weaklistoffset"]
        [::std::mem::offset_of!(_typeobject, tp_weaklistoffset) - 208usize];
    ["Offset of field: _typeobject::tp_iter"]
        [::std::mem::offset_of!(_typeobject, tp_iter) - 216usize];
    ["Offset of field: _typeobject::tp_iternext"]
        [::std::mem::offset_of!(_typeobject, tp_iternext) - 224usize];
    ["Offset of field: _typeobject::tp_methods"]
        [::std::mem::offset_of!(_typeobject, tp_methods) - 232usize];
    ["Offset of field: _typeobject::tp_members"]
        [::std::mem::offset_of!(_typeobject, tp_members) - 240usize];
    ["Offset of field: _typeobject::tp_getset"]
        [::std::mem::offset_of!(_typeobject, tp_getset) - 248usize];
    ["Offset of field: _typeobject::tp_base"]
        [::std::mem::offset_of!(_typeobject, tp_base) - 256usize];
    ["Offset of field: _typeobject::tp_dict"]
        [::std::mem::offset_of!(_typeobject, tp_dict) - 264usize];
    ["Offset of field: _typeobject::tp_descr_get"]
        [::std::mem::offset_of!(_typeobject, tp_descr_get) - 272usize];
    ["Offset of field: _typeobject::tp_descr_set"]
        [::std::mem::offset_of!(_typeobject, tp_descr_set) - 280usize];
    ["Offset of field: _typeobject::tp_dictoffset"]
        [::std::mem::offset_of!(_typeobject, tp_dictoffset) - 288usize];
    ["Offset of field: _typeobject::tp_init"]
        [::std::mem::offset_of!(_typeobject, tp_init) - 296usize];
    ["Offset of field: _typeobject::tp_alloc"]
        [::std::mem::offset_of!(_typeobject, tp_alloc) - 304usize];
    ["Offset of field: _typeobject::tp_new"]
        [::std::mem::offset_of!(_typeobject, tp_new) - 312usize];
    ["Offset of field: _typeobject::tp_free"]
        [::std::mem::offset_of!(_typeobject, tp_free) - 320usize];
    ["Offset of field: _typeobject::tp_is_gc"]
        [::std::mem::offset_of!(_typeobject, tp_is_gc) - 328usize];
    ["Offset of field: _typeobject::tp_bases"]
        [::std::mem::offset_of!(_typeobject, tp_bases) - 336usize];
    ["Offset of field: _typeobject::tp_mro"]
        [::std::mem::offset_of!(_typeobject, tp_mro) - 344usize];
    ["Offset of field: _typeobject::tp_cache"]
        [::std::mem::offset_of!(_typeobject, tp_cache) - 352usize];
    ["Offset of field: _typeobject::tp_subclasses"]
        [::std::mem::offset_of!(_typeobject, tp_subclasses) - 360usize];
    ["Offset of field: _typeobject::tp_weaklist"]
        [::std::mem::offset_of!(_typeobject, tp_weaklist) - 368usize];
    ["Offset of field: _typeobject::tp_del"]
        [::std::mem::offset_of!(_typeobject, tp_del) - 376usize];
    ["Offset of field: _typeobject::tp_version_tag"]
        [::std::mem::offset_of!(_typeobject, tp_version_tag) - 384usize];
    ["Offset of field: _typeobject::tp_finalize"]
        [::std::mem::offset_of!(_typeobject, tp_finalize) - 392usize];
    ["Offset of field: _typeobject::tp_vectorcall"]
        [::std::mem::offset_of!(_typeobject, tp_vectorcall) - 400usize];
    ["Offset of field: _typeobject::tp_watched"]
        [::std::mem::offset_of!(_typeobject, tp_watched) - 408usize];
    ["Offset of field: _typeobject::tp_versions_used"]
        [::std::mem::offset_of!(_typeobject, tp_versions_used) - 410usize];
};
pub type Py_UCS4 = u32;
pub type Py_UCS2 = u16;
pub type Py_UCS1 = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyASCIIObject {
    pub ob_base: PyObject,
    pub length: Py_ssize_t,
    pub hash: Py_hash_t,
    pub state: PyASCIIObject__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct PyASCIIObject__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyASCIIObject__bindgen_ty_1"]
        [::std::mem::size_of::<PyASCIIObject__bindgen_ty_1>() - 4usize];
    ["Alignment of PyASCIIObject__bindgen_ty_1"]
        [::std::mem::align_of::<PyASCIIObject__bindgen_ty_1>() - 4usize];
};
impl PyASCIIObject__bindgen_ty_1 {
    #[inline]
    pub fn interned(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_interned(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn interned_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_interned_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn kind(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_kind(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn kind_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_kind_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn compact(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_compact(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn compact_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_compact_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ascii(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ascii(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ascii_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ascii_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn statically_allocated(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_statically_allocated(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn statically_allocated_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_statically_allocated_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        interned: ::std::os::raw::c_uint,
        kind: ::std::os::raw::c_uint,
        compact: ::std::os::raw::c_uint,
        ascii: ::std::os::raw::c_uint,
        statically_allocated: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let interned: u32 = unsafe { ::std::mem::transmute(interned) };
            interned as u64
        });
        __bindgen_bitfield_unit.set(2usize, 3u8, {
            let kind: u32 = unsafe { ::std::mem::transmute(kind) };
            kind as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let compact: u32 = unsafe { ::std::mem::transmute(compact) };
            compact as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ascii: u32 = unsafe { ::std::mem::transmute(ascii) };
            ascii as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let statically_allocated: u32 = unsafe { ::std::mem::transmute(statically_allocated) };
            statically_allocated as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyASCIIObject"][::std::mem::size_of::<PyASCIIObject>() - 40usize];
    ["Alignment of PyASCIIObject"][::std::mem::align_of::<PyASCIIObject>() - 8usize];
    ["Offset of field: PyASCIIObject::ob_base"]
        [::std::mem::offset_of!(PyASCIIObject, ob_base) - 0usize];
    ["Offset of field: PyASCIIObject::length"]
        [::std::mem::offset_of!(PyASCIIObject, length) - 16usize];
    ["Offset of field: PyASCIIObject::hash"][::std::mem::offset_of!(PyASCIIObject, hash) - 24usize];
    ["Offset of field: PyASCIIObject::state"]
        [::std::mem::offset_of!(PyASCIIObject, state) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyCompactUnicodeObject {
    pub _base: PyASCIIObject,
    pub utf8_length: Py_ssize_t,
    pub utf8: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyCompactUnicodeObject"][::std::mem::size_of::<PyCompactUnicodeObject>() - 56usize];
    ["Alignment of PyCompactUnicodeObject"]
        [::std::mem::align_of::<PyCompactUnicodeObject>() - 8usize];
    ["Offset of field: PyCompactUnicodeObject::_base"]
        [::std::mem::offset_of!(PyCompactUnicodeObject, _base) - 0usize];
    ["Offset of field: PyCompactUnicodeObject::utf8_length"]
        [::std::mem::offset_of!(PyCompactUnicodeObject, utf8_length) - 40usize];
    ["Offset of field: PyCompactUnicodeObject::utf8"]
        [::std::mem::offset_of!(PyCompactUnicodeObject, utf8) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyUnicodeObject {
    pub _base: PyCompactUnicodeObject,
    pub data: PyUnicodeObject__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PyUnicodeObject__bindgen_ty_1 {
    pub any: *mut ::std::os::raw::c_void,
    pub latin1: *mut Py_UCS1,
    pub ucs2: *mut Py_UCS2,
    pub ucs4: *mut Py_UCS4,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyUnicodeObject__bindgen_ty_1"]
        [::std::mem::size_of::<PyUnicodeObject__bindgen_ty_1>() - 8usize];
    ["Alignment of PyUnicodeObject__bindgen_ty_1"]
        [::std::mem::align_of::<PyUnicodeObject__bindgen_ty_1>() - 8usize];
    ["Offset of field: PyUnicodeObject__bindgen_ty_1::any"]
        [::std::mem::offset_of!(PyUnicodeObject__bindgen_ty_1, any) - 0usize];
    ["Offset of field: PyUnicodeObject__bindgen_ty_1::latin1"]
        [::std::mem::offset_of!(PyUnicodeObject__bindgen_ty_1, latin1) - 0usize];
    ["Offset of field: PyUnicodeObject__bindgen_ty_1::ucs2"]
        [::std::mem::offset_of!(PyUnicodeObject__bindgen_ty_1, ucs2) - 0usize];
    ["Offset of field: PyUnicodeObject__bindgen_ty_1::ucs4"]
        [::std::mem::offset_of!(PyUnicodeObject__bindgen_ty_1, ucs4) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyUnicodeObject"][::std::mem::size_of::<PyUnicodeObject>() - 64usize];
    ["Alignment of PyUnicodeObject"][::std::mem::align_of::<PyUnicodeObject>() - 8usize];
    ["Offset of field: PyUnicodeObject::_base"]
        [::std::mem::offset_of!(PyUnicodeObject, _base) - 0usize];
    ["Offset of field: PyUnicodeObject::data"]
        [::std::mem::offset_of!(PyUnicodeObject, data) - 56usize];
};
pub type PyCFunction = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMethodDef {
    pub ml_name: *const ::std::os::raw::c_char,
    pub ml_meth: PyCFunction,
    pub ml_flags: ::std::os::raw::c_int,
    pub ml_doc: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyMethodDef"][::std::mem::size_of::<PyMethodDef>() - 32usize];
    ["Alignment of PyMethodDef"][::std::mem::align_of::<PyMethodDef>() - 8usize];
    ["Offset of field: PyMethodDef::ml_name"]
        [::std::mem::offset_of!(PyMethodDef, ml_name) - 0usize];
    ["Offset of field: PyMethodDef::ml_meth"]
        [::std::mem::offset_of!(PyMethodDef, ml_meth) - 8usize];
    ["Offset of field: PyMethodDef::ml_flags"]
        [::std::mem::offset_of!(PyMethodDef, ml_flags) - 16usize];
    ["Offset of field: PyMethodDef::ml_doc"][::std::mem::offset_of!(PyMethodDef, ml_doc) - 24usize];
};
pub type getter = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut ::std::os::raw::c_void) -> *mut PyObject,
>;
pub type setter = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyGetSetDef {
    pub name: *const ::std::os::raw::c_char,
    pub get: getter,
    pub set: setter,
    pub doc: *const ::std::os::raw::c_char,
    pub closure: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyGetSetDef"][::std::mem::size_of::<PyGetSetDef>() - 40usize];
    ["Alignment of PyGetSetDef"][::std::mem::align_of::<PyGetSetDef>() - 8usize];
    ["Offset of field: PyGetSetDef::name"][::std::mem::offset_of!(PyGetSetDef, name) - 0usize];
    ["Offset of field: PyGetSetDef::get"][::std::mem::offset_of!(PyGetSetDef, get) - 8usize];
    ["Offset of field: PyGetSetDef::set"][::std::mem::offset_of!(PyGetSetDef, set) - 16usize];
    ["Offset of field: PyGetSetDef::doc"][::std::mem::offset_of!(PyGetSetDef, doc) - 24usize];
    ["Offset of field: PyGetSetDef::closure"]
        [::std::mem::offset_of!(PyGetSetDef, closure) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMemberDef {
    pub name: *const ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub offset: Py_ssize_t,
    pub flags: ::std::os::raw::c_int,
    pub doc: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyMemberDef"][::std::mem::size_of::<PyMemberDef>() - 40usize];
    ["Alignment of PyMemberDef"][::std::mem::align_of::<PyMemberDef>() - 8usize];
    ["Offset of field: PyMemberDef::name"][::std::mem::offset_of!(PyMemberDef, name) - 0usize];
    ["Offset of field: PyMemberDef::type_"][::std::mem::offset_of!(PyMemberDef, type_) - 8usize];
    ["Offset of field: PyMemberDef::offset"][::std::mem::offset_of!(PyMemberDef, offset) - 16usize];
    ["Offset of field: PyMemberDef::flags"][::std::mem::offset_of!(PyMemberDef, flags) - 24usize];
    ["Offset of field: PyMemberDef::doc"][::std::mem::offset_of!(PyMemberDef, doc) - 32usize];
};
pub type npy_longlong = ::std::os::raw::c_longlong;
pub type npy_ulonglong = ::std::os::raw::c_ulonglong;
pub type npy_bool = ::std::os::raw::c_uchar;
pub type npy_longdouble = u128;
pub type npy_cdouble = __BindgenComplex<f64>;
pub type npy_cfloat = __BindgenComplex<f32>;
pub type npy_clongdouble = __BindgenComplex<f64>;
pub type npy_int64 = ::std::os::raw::c_long;
pub type npy_uint16 = ::std::os::raw::c_ushort;
pub type npy_half = npy_uint16;
pub type npy_timedelta = npy_int64;
pub type npy_datetime = npy_int64;
pub const NPY_DATETIMEUNIT_NPY_FR_ERROR: NPY_DATETIMEUNIT = -1;
pub const NPY_DATETIMEUNIT_NPY_FR_Y: NPY_DATETIMEUNIT = 0;
pub const NPY_DATETIMEUNIT_NPY_FR_M: NPY_DATETIMEUNIT = 1;
pub const NPY_DATETIMEUNIT_NPY_FR_W: NPY_DATETIMEUNIT = 2;
pub const NPY_DATETIMEUNIT_NPY_FR_D: NPY_DATETIMEUNIT = 4;
pub const NPY_DATETIMEUNIT_NPY_FR_h: NPY_DATETIMEUNIT = 5;
pub const NPY_DATETIMEUNIT_NPY_FR_m: NPY_DATETIMEUNIT = 6;
pub const NPY_DATETIMEUNIT_NPY_FR_s: NPY_DATETIMEUNIT = 7;
pub const NPY_DATETIMEUNIT_NPY_FR_ms: NPY_DATETIMEUNIT = 8;
pub const NPY_DATETIMEUNIT_NPY_FR_us: NPY_DATETIMEUNIT = 9;
pub const NPY_DATETIMEUNIT_NPY_FR_ns: NPY_DATETIMEUNIT = 10;
pub const NPY_DATETIMEUNIT_NPY_FR_ps: NPY_DATETIMEUNIT = 11;
pub const NPY_DATETIMEUNIT_NPY_FR_fs: NPY_DATETIMEUNIT = 12;
pub const NPY_DATETIMEUNIT_NPY_FR_as: NPY_DATETIMEUNIT = 13;
pub const NPY_DATETIMEUNIT_NPY_FR_GENERIC: NPY_DATETIMEUNIT = 14;
pub type NPY_DATETIMEUNIT = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PyArray_Descr {
    pub ob_base: PyObject,
    pub typeobj: *mut PyTypeObject,
    pub kind: ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_char,
    pub byteorder: ::std::os::raw::c_char,
    pub _former_flags: ::std::os::raw::c_char,
    pub type_num: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PyArray_Descr"][::std::mem::size_of::<_PyArray_Descr>() - 32usize];
    ["Alignment of _PyArray_Descr"][::std::mem::align_of::<_PyArray_Descr>() - 8usize];
    ["Offset of field: _PyArray_Descr::ob_base"]
        [::std::mem::offset_of!(_PyArray_Descr, ob_base) - 0usize];
    ["Offset of field: _PyArray_Descr::typeobj"]
        [::std::mem::offset_of!(_PyArray_Descr, typeobj) - 16usize];
    ["Offset of field: _PyArray_Descr::kind"]
        [::std::mem::offset_of!(_PyArray_Descr, kind) - 24usize];
    ["Offset of field: _PyArray_Descr::type_"]
        [::std::mem::offset_of!(_PyArray_Descr, type_) - 25usize];
    ["Offset of field: _PyArray_Descr::byteorder"]
        [::std::mem::offset_of!(_PyArray_Descr, byteorder) - 26usize];
    ["Offset of field: _PyArray_Descr::_former_flags"]
        [::std::mem::offset_of!(_PyArray_Descr, _former_flags) - 27usize];
    ["Offset of field: _PyArray_Descr::type_num"]
        [::std::mem::offset_of!(_PyArray_Descr, type_num) - 28usize];
};
pub type PyArray_Descr = _PyArray_Descr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyArray_DatetimeMetaData {
    pub base: NPY_DATETIMEUNIT,
    pub num: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyArray_DatetimeMetaData"]
        [::std::mem::size_of::<PyArray_DatetimeMetaData>() - 8usize];
    ["Alignment of PyArray_DatetimeMetaData"]
        [::std::mem::align_of::<PyArray_DatetimeMetaData>() - 4usize];
    ["Offset of field: PyArray_DatetimeMetaData::base"]
        [::std::mem::offset_of!(PyArray_DatetimeMetaData, base) - 0usize];
    ["Offset of field: PyArray_DatetimeMetaData::num"]
        [::std::mem::offset_of!(PyArray_DatetimeMetaData, num) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyBoolScalarObject {
    pub ob_base: PyObject,
    pub obval: npy_bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyBoolScalarObject"][::std::mem::size_of::<PyBoolScalarObject>() - 24usize];
    ["Alignment of PyBoolScalarObject"][::std::mem::align_of::<PyBoolScalarObject>() - 8usize];
    ["Offset of field: PyBoolScalarObject::ob_base"]
        [::std::mem::offset_of!(PyBoolScalarObject, ob_base) - 0usize];
    ["Offset of field: PyBoolScalarObject::obval"]
        [::std::mem::offset_of!(PyBoolScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyByteScalarObject {
    pub ob_base: PyObject,
    pub obval: ::std::os::raw::c_schar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyByteScalarObject"][::std::mem::size_of::<PyByteScalarObject>() - 24usize];
    ["Alignment of PyByteScalarObject"][::std::mem::align_of::<PyByteScalarObject>() - 8usize];
    ["Offset of field: PyByteScalarObject::ob_base"]
        [::std::mem::offset_of!(PyByteScalarObject, ob_base) - 0usize];
    ["Offset of field: PyByteScalarObject::obval"]
        [::std::mem::offset_of!(PyByteScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyShortScalarObject {
    pub ob_base: PyObject,
    pub obval: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyShortScalarObject"][::std::mem::size_of::<PyShortScalarObject>() - 24usize];
    ["Alignment of PyShortScalarObject"][::std::mem::align_of::<PyShortScalarObject>() - 8usize];
    ["Offset of field: PyShortScalarObject::ob_base"]
        [::std::mem::offset_of!(PyShortScalarObject, ob_base) - 0usize];
    ["Offset of field: PyShortScalarObject::obval"]
        [::std::mem::offset_of!(PyShortScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyIntScalarObject {
    pub ob_base: PyObject,
    pub obval: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyIntScalarObject"][::std::mem::size_of::<PyIntScalarObject>() - 24usize];
    ["Alignment of PyIntScalarObject"][::std::mem::align_of::<PyIntScalarObject>() - 8usize];
    ["Offset of field: PyIntScalarObject::ob_base"]
        [::std::mem::offset_of!(PyIntScalarObject, ob_base) - 0usize];
    ["Offset of field: PyIntScalarObject::obval"]
        [::std::mem::offset_of!(PyIntScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyLongScalarObject {
    pub ob_base: PyObject,
    pub obval: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyLongScalarObject"][::std::mem::size_of::<PyLongScalarObject>() - 24usize];
    ["Alignment of PyLongScalarObject"][::std::mem::align_of::<PyLongScalarObject>() - 8usize];
    ["Offset of field: PyLongScalarObject::ob_base"]
        [::std::mem::offset_of!(PyLongScalarObject, ob_base) - 0usize];
    ["Offset of field: PyLongScalarObject::obval"]
        [::std::mem::offset_of!(PyLongScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyLongLongScalarObject {
    pub ob_base: PyObject,
    pub obval: npy_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyLongLongScalarObject"][::std::mem::size_of::<PyLongLongScalarObject>() - 24usize];
    ["Alignment of PyLongLongScalarObject"]
        [::std::mem::align_of::<PyLongLongScalarObject>() - 8usize];
    ["Offset of field: PyLongLongScalarObject::ob_base"]
        [::std::mem::offset_of!(PyLongLongScalarObject, ob_base) - 0usize];
    ["Offset of field: PyLongLongScalarObject::obval"]
        [::std::mem::offset_of!(PyLongLongScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyUByteScalarObject {
    pub ob_base: PyObject,
    pub obval: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyUByteScalarObject"][::std::mem::size_of::<PyUByteScalarObject>() - 24usize];
    ["Alignment of PyUByteScalarObject"][::std::mem::align_of::<PyUByteScalarObject>() - 8usize];
    ["Offset of field: PyUByteScalarObject::ob_base"]
        [::std::mem::offset_of!(PyUByteScalarObject, ob_base) - 0usize];
    ["Offset of field: PyUByteScalarObject::obval"]
        [::std::mem::offset_of!(PyUByteScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyUShortScalarObject {
    pub ob_base: PyObject,
    pub obval: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyUShortScalarObject"][::std::mem::size_of::<PyUShortScalarObject>() - 24usize];
    ["Alignment of PyUShortScalarObject"][::std::mem::align_of::<PyUShortScalarObject>() - 8usize];
    ["Offset of field: PyUShortScalarObject::ob_base"]
        [::std::mem::offset_of!(PyUShortScalarObject, ob_base) - 0usize];
    ["Offset of field: PyUShortScalarObject::obval"]
        [::std::mem::offset_of!(PyUShortScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyUIntScalarObject {
    pub ob_base: PyObject,
    pub obval: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyUIntScalarObject"][::std::mem::size_of::<PyUIntScalarObject>() - 24usize];
    ["Alignment of PyUIntScalarObject"][::std::mem::align_of::<PyUIntScalarObject>() - 8usize];
    ["Offset of field: PyUIntScalarObject::ob_base"]
        [::std::mem::offset_of!(PyUIntScalarObject, ob_base) - 0usize];
    ["Offset of field: PyUIntScalarObject::obval"]
        [::std::mem::offset_of!(PyUIntScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyULongScalarObject {
    pub ob_base: PyObject,
    pub obval: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyULongScalarObject"][::std::mem::size_of::<PyULongScalarObject>() - 24usize];
    ["Alignment of PyULongScalarObject"][::std::mem::align_of::<PyULongScalarObject>() - 8usize];
    ["Offset of field: PyULongScalarObject::ob_base"]
        [::std::mem::offset_of!(PyULongScalarObject, ob_base) - 0usize];
    ["Offset of field: PyULongScalarObject::obval"]
        [::std::mem::offset_of!(PyULongScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyULongLongScalarObject {
    pub ob_base: PyObject,
    pub obval: npy_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyULongLongScalarObject"][::std::mem::size_of::<PyULongLongScalarObject>() - 24usize];
    ["Alignment of PyULongLongScalarObject"]
        [::std::mem::align_of::<PyULongLongScalarObject>() - 8usize];
    ["Offset of field: PyULongLongScalarObject::ob_base"]
        [::std::mem::offset_of!(PyULongLongScalarObject, ob_base) - 0usize];
    ["Offset of field: PyULongLongScalarObject::obval"]
        [::std::mem::offset_of!(PyULongLongScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyHalfScalarObject {
    pub ob_base: PyObject,
    pub obval: npy_half,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyHalfScalarObject"][::std::mem::size_of::<PyHalfScalarObject>() - 24usize];
    ["Alignment of PyHalfScalarObject"][::std::mem::align_of::<PyHalfScalarObject>() - 8usize];
    ["Offset of field: PyHalfScalarObject::ob_base"]
        [::std::mem::offset_of!(PyHalfScalarObject, ob_base) - 0usize];
    ["Offset of field: PyHalfScalarObject::obval"]
        [::std::mem::offset_of!(PyHalfScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyFloatScalarObject {
    pub ob_base: PyObject,
    pub obval: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyFloatScalarObject"][::std::mem::size_of::<PyFloatScalarObject>() - 24usize];
    ["Alignment of PyFloatScalarObject"][::std::mem::align_of::<PyFloatScalarObject>() - 8usize];
    ["Offset of field: PyFloatScalarObject::ob_base"]
        [::std::mem::offset_of!(PyFloatScalarObject, ob_base) - 0usize];
    ["Offset of field: PyFloatScalarObject::obval"]
        [::std::mem::offset_of!(PyFloatScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyDoubleScalarObject {
    pub ob_base: PyObject,
    pub obval: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyDoubleScalarObject"][::std::mem::size_of::<PyDoubleScalarObject>() - 24usize];
    ["Alignment of PyDoubleScalarObject"][::std::mem::align_of::<PyDoubleScalarObject>() - 8usize];
    ["Offset of field: PyDoubleScalarObject::ob_base"]
        [::std::mem::offset_of!(PyDoubleScalarObject, ob_base) - 0usize];
    ["Offset of field: PyDoubleScalarObject::obval"]
        [::std::mem::offset_of!(PyDoubleScalarObject, obval) - 16usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct PyLongDoubleScalarObject {
    pub ob_base: PyObject,
    pub obval: npy_longdouble,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyLongDoubleScalarObject"]
        [::std::mem::size_of::<PyLongDoubleScalarObject>() - 32usize];
    ["Alignment of PyLongDoubleScalarObject"]
        [::std::mem::align_of::<PyLongDoubleScalarObject>() - 16usize];
    ["Offset of field: PyLongDoubleScalarObject::ob_base"]
        [::std::mem::offset_of!(PyLongDoubleScalarObject, ob_base) - 0usize];
    ["Offset of field: PyLongDoubleScalarObject::obval"]
        [::std::mem::offset_of!(PyLongDoubleScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyCFloatScalarObject {
    pub ob_base: PyObject,
    pub obval: npy_cfloat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyCFloatScalarObject"][::std::mem::size_of::<PyCFloatScalarObject>() - 24usize];
    ["Alignment of PyCFloatScalarObject"][::std::mem::align_of::<PyCFloatScalarObject>() - 8usize];
    ["Offset of field: PyCFloatScalarObject::ob_base"]
        [::std::mem::offset_of!(PyCFloatScalarObject, ob_base) - 0usize];
    ["Offset of field: PyCFloatScalarObject::obval"]
        [::std::mem::offset_of!(PyCFloatScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyCDoubleScalarObject {
    pub ob_base: PyObject,
    pub obval: npy_cdouble,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyCDoubleScalarObject"][::std::mem::size_of::<PyCDoubleScalarObject>() - 32usize];
    ["Alignment of PyCDoubleScalarObject"]
        [::std::mem::align_of::<PyCDoubleScalarObject>() - 8usize];
    ["Offset of field: PyCDoubleScalarObject::ob_base"]
        [::std::mem::offset_of!(PyCDoubleScalarObject, ob_base) - 0usize];
    ["Offset of field: PyCDoubleScalarObject::obval"]
        [::std::mem::offset_of!(PyCDoubleScalarObject, obval) - 16usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct PyCLongDoubleScalarObject {
    pub ob_base: PyObject,
    pub obval: npy_clongdouble,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyCLongDoubleScalarObject"]
        [::std::mem::size_of::<PyCLongDoubleScalarObject>() - 48usize];
    ["Alignment of PyCLongDoubleScalarObject"]
        [::std::mem::align_of::<PyCLongDoubleScalarObject>() - 16usize];
    ["Offset of field: PyCLongDoubleScalarObject::ob_base"]
        [::std::mem::offset_of!(PyCLongDoubleScalarObject, ob_base) - 0usize];
    ["Offset of field: PyCLongDoubleScalarObject::obval"]
        [::std::mem::offset_of!(PyCLongDoubleScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyObjectScalarObject {
    pub ob_base: PyObject,
    pub obval: *mut PyObject,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyObjectScalarObject"][::std::mem::size_of::<PyObjectScalarObject>() - 24usize];
    ["Alignment of PyObjectScalarObject"][::std::mem::align_of::<PyObjectScalarObject>() - 8usize];
    ["Offset of field: PyObjectScalarObject::ob_base"]
        [::std::mem::offset_of!(PyObjectScalarObject, ob_base) - 0usize];
    ["Offset of field: PyObjectScalarObject::obval"]
        [::std::mem::offset_of!(PyObjectScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyDatetimeScalarObject {
    pub ob_base: PyObject,
    pub obval: npy_datetime,
    pub obmeta: PyArray_DatetimeMetaData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyDatetimeScalarObject"][::std::mem::size_of::<PyDatetimeScalarObject>() - 32usize];
    ["Alignment of PyDatetimeScalarObject"]
        [::std::mem::align_of::<PyDatetimeScalarObject>() - 8usize];
    ["Offset of field: PyDatetimeScalarObject::ob_base"]
        [::std::mem::offset_of!(PyDatetimeScalarObject, ob_base) - 0usize];
    ["Offset of field: PyDatetimeScalarObject::obval"]
        [::std::mem::offset_of!(PyDatetimeScalarObject, obval) - 16usize];
    ["Offset of field: PyDatetimeScalarObject::obmeta"]
        [::std::mem::offset_of!(PyDatetimeScalarObject, obmeta) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyTimedeltaScalarObject {
    pub ob_base: PyObject,
    pub obval: npy_timedelta,
    pub obmeta: PyArray_DatetimeMetaData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyTimedeltaScalarObject"][::std::mem::size_of::<PyTimedeltaScalarObject>() - 32usize];
    ["Alignment of PyTimedeltaScalarObject"]
        [::std::mem::align_of::<PyTimedeltaScalarObject>() - 8usize];
    ["Offset of field: PyTimedeltaScalarObject::ob_base"]
        [::std::mem::offset_of!(PyTimedeltaScalarObject, ob_base) - 0usize];
    ["Offset of field: PyTimedeltaScalarObject::obval"]
        [::std::mem::offset_of!(PyTimedeltaScalarObject, obval) - 16usize];
    ["Offset of field: PyTimedeltaScalarObject::obmeta"]
        [::std::mem::offset_of!(PyTimedeltaScalarObject, obmeta) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyScalarObject {
    pub ob_base: PyObject,
    pub obval: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyScalarObject"][::std::mem::size_of::<PyScalarObject>() - 24usize];
    ["Alignment of PyScalarObject"][::std::mem::align_of::<PyScalarObject>() - 8usize];
    ["Offset of field: PyScalarObject::ob_base"]
        [::std::mem::offset_of!(PyScalarObject, ob_base) - 0usize];
    ["Offset of field: PyScalarObject::obval"]
        [::std::mem::offset_of!(PyScalarObject, obval) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyUnicodeScalarObject {
    pub base: PyUnicodeObject,
    pub obval: *mut Py_UCS4,
    pub buffer_fmt: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyUnicodeScalarObject"][::std::mem::size_of::<PyUnicodeScalarObject>() - 80usize];
    ["Alignment of PyUnicodeScalarObject"]
        [::std::mem::align_of::<PyUnicodeScalarObject>() - 8usize];
    ["Offset of field: PyUnicodeScalarObject::base"]
        [::std::mem::offset_of!(PyUnicodeScalarObject, base) - 0usize];
    ["Offset of field: PyUnicodeScalarObject::obval"]
        [::std::mem::offset_of!(PyUnicodeScalarObject, obval) - 64usize];
    ["Offset of field: PyUnicodeScalarObject::buffer_fmt"]
        [::std::mem::offset_of!(PyUnicodeScalarObject, buffer_fmt) - 72usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyVoidScalarObject {
    pub ob_base: PyVarObject,
    pub obval: *mut ::std::os::raw::c_char,
    pub descr: *mut PyArray_Descr,
    pub flags: ::std::os::raw::c_int,
    pub base: *mut PyObject,
    pub _buffer_info: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyVoidScalarObject"][::std::mem::size_of::<PyVoidScalarObject>() - 64usize];
    ["Alignment of PyVoidScalarObject"][::std::mem::align_of::<PyVoidScalarObject>() - 8usize];
    ["Offset of field: PyVoidScalarObject::ob_base"]
        [::std::mem::offset_of!(PyVoidScalarObject, ob_base) - 0usize];
    ["Offset of field: PyVoidScalarObject::obval"]
        [::std::mem::offset_of!(PyVoidScalarObject, obval) - 24usize];
    ["Offset of field: PyVoidScalarObject::descr"]
        [::std::mem::offset_of!(PyVoidScalarObject, descr) - 32usize];
    ["Offset of field: PyVoidScalarObject::flags"]
        [::std::mem::offset_of!(PyVoidScalarObject, flags) - 40usize];
    ["Offset of field: PyVoidScalarObject::base"]
        [::std::mem::offset_of!(PyVoidScalarObject, base) - 48usize];
    ["Offset of field: PyVoidScalarObject::_buffer_info"]
        [::std::mem::offset_of!(PyVoidScalarObject, _buffer_info) - 56usize];
};
